package com.example.digiotest.controller;

import com.example.digiotest.DTO.Stu_subDTO;
import com.example.digiotest.DTO.StudentDTO;
import com.example.digiotest.DTO.SubjectDTO;
import com.example.digiotest.DTO.TeacherDTO;
import com.example.digiotest.excelexporter.SubjectExcelExporter;
import com.example.digiotest.excelexporter.Subject_StudentExcelExporter;
import com.example.digiotest.model.Stu_sub;
import com.example.digiotest.model.Student;
import com.example.digiotest.model.Subject;
import com.example.digiotest.model.Teacher;
import com.example.digiotest.repository.Stu_SubRepository;
import com.example.digiotest.repository.StudentRepository;
import com.example.digiotest.repository.SubjectRepository;
import com.example.digiotest.repository.TeacherRepository;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.Serializable;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.util.*;

@Controller // This means that this class is a Controller
@RestController
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController implements Serializable {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TeacherRepository TeaRep;
    @Autowired
    private StudentRepository StuRep;
    @Autowired
    private SubjectRepository SubRep;
    @Autowired
    private Stu_SubRepository Stu_SubRep;

    @PostMapping(path="/addTeacher") // Map ONLY POST Requests
    public @ResponseBody
    String addNewTeacher(@RequestBody String jsonObj) {
        TeacherDTO modelDTO = new TeacherDTO();
        ObjectMapper objectMapper = new ObjectMapper();

        try {
            modelDTO = objectMapper.readValue(jsonObj, TeacherDTO.class);
        } catch (Exception e) {
            System.out.println(e);
        }
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Teacher t = new Teacher(modelDTO.getFirstName(), modelDTO.getLastName(), modelDTO.getMajor());
    TeaRep.save(t);
    return "Saved New Teacher!";
    //save in cmd     ==> curl localhost:8082/demo/addTeacher -d first_name=AAA -d last_name=bbbb -d major=llll
    //save in postman ==> http://localhost:8082/demo/addTeacher?first_name=tea&last_name=coffe&major=IT

        /*

        {
            "first_name":"adsdas",
            "last_name":"asdsad",
            "major":"IT"
        }

         */

    }

    @PostMapping(path="/addStudent") // Map ONLY POST Requests
    public @ResponseBody String addNewStudent (@RequestBody String jsonObj) {
        StudentDTO modelDTO = new StudentDTO();
        ObjectMapper objectMapper = new ObjectMapper();

        try {
            modelDTO = objectMapper.readValue(jsonObj, StudentDTO.class);
        } catch (Exception e) {
            System.out.println(e);
        }
                // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Student s = new Student(modelDTO.getFistName(), modelDTO.getLastName(), modelDTO.getYear());
        StuRep.save(s);
        return "Saved New Student!";
        //save in cmd     ==> curl localhost:8082/demo/addStudent -d first_name=hu -d last_name=man -d year=4
        //save in postman ==> http://localhost:8082/demo/addStudent?first_name=tea&last_name=coffe&major=IT
        /*

        {
            "first_name":"adsdas",
            "last_name":"asdsad",
            "year":"44"
        }

         */
    }

    @PostMapping(path = "/addSubject") // Map ONLY POST Requests
    public @ResponseBody
    String addNewSubject(@RequestBody String jsonObj) {
        SubjectDTO modelDTO = new SubjectDTO();
        ObjectMapper objectMapper = new ObjectMapper();

        try {
            modelDTO = objectMapper.readValue(jsonObj, SubjectDTO.class);
        } catch (Exception e) {
            System.out.println(e);
        }


        Teacher teacher = new Teacher(modelDTO.getTeacherID());
        //Subject subj = new Subject();
        Subject subj = new Subject(modelDTO.getNameSubject(),modelDTO.getDescription(),modelDTO.getCredit(),modelDTO.getTimeStart(),modelDTO.getTimeOff(),teacher);
//      modelDTO.getNameSubject(),modelDTO.getDescription(),modelDTO.getCredit(),modelDTO.getTimeStart(),modelDTO.getTimeOff(),tea

        SubRep.save(subj);
        return "Saved New Subject!";
        /* body raw json

        {
            "credit": "1.5",
            "description": "555",
            "name_subject": "long",
            "teacher_id": "3",
            "time_off": "01:00:00:000000000",
            "time_start": "03:00:00:000000000"
        }
        // time +07:00:00  ==> 03:00:00 --> 10:00:00
         */
    }

    @PostMapping(path="/addRegisSubject") // Map ONLY POST Requests
    public @ResponseBody String addRegisSubject (@RequestBody String jsonObj) {

        Stu_subDTO modelDTO = new Stu_subDTO();
        ObjectMapper objectMapper = new ObjectMapper();

        Iterable<Stu_sub> stu_subIterable = new ArrayList<>();
        Optional<Subject> Data_SubjectRegising;
        //Optional<Stu_sub> Data_stu_sub;

        boolean check_time = false;

        try {
            modelDTO = objectMapper.readValue(jsonObj, Stu_subDTO.class);
            stu_subIterable = Stu_SubRep.findAll();
        } catch (Exception e) {
            System.out.println(e);
        }



        Student student =new Student(modelDTO.getstudentId());
        Subject subject =new Subject(modelDTO.getsubjectId());


        int student_subject_total = Stu_SubRep.countRissubjectForStudent(student);
        int max = 8;
        String return_msg="";
        if(student_subject_total>=max){
            return_msg="Your Regis Subject Full";
        }else{

            Data_SubjectRegising = SubRep.findById(modelDTO.getsubjectId());
            LocalTime subjectRegising_time_start = Data_SubjectRegising.get().getTimeStart();
            LocalTime subjectRegising_time_off   = Data_SubjectRegising.get().getTimeOff();
            LocalTime subjectRegisde_time_off;
            LocalTime subjectRegised_time_start;
            int size = 0;

            for(Stu_sub ss : stu_subIterable){
                size++;

                if(ss.getstudentId().getId()==modelDTO.getstudentId()){

                   subjectRegised_time_start = ss.getsubjectId().getTimeStart();
                   subjectRegisde_time_off = ss.getsubjectId().getTimeOff();

                    System.out.println(subjectRegising_time_start + " " + subjectRegising_time_off +"\n"+
                                    subjectRegised_time_start + " " + subjectRegisde_time_off +"\n"
                            );
                    if((subjectRegising_time_start.isAfter(subjectRegisde_time_off)||
                                    subjectRegising_time_start.equals(subjectRegisde_time_off))||
                            (subjectRegising_time_off.isBefore(subjectRegised_time_start)||
                                    subjectRegising_time_off.equals(subjectRegised_time_start))){
                        check_time=true;
                    }else{
                        check_time=false;
                        break;
                    }

                }else{
                    check_time=true;
                }


            }

                if(check_time||size==0){
                    Stu_sub stu_sub = new Stu_sub(student,subject);
                    Stu_SubRep.save(stu_sub);
                    return_msg = "Saved Regis Subject " + (student_subject_total+1) + "\nsize is  " +size;
                }else{
                    return_msg= "Regis Fail!\n size is " + size ;
                }

            }

        return return_msg;

        /*
        {
            "student_id": "30",
            "subject_id": "13"
        }
         */

    }

    @GetMapping("/SubjectExport")
    public void SubjectExport(HttpServletResponse response) throws IOException {
        response.setContentType("application/octet-stream");
        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd_HH:mm:ss");
        String currentDateTime = dateFormatter.format(new Date());

        String headerKey = "Content-Disposition";
        String headerValue = "attachment; filename=Subject_" + currentDateTime + ".xlsx";
        response.setHeader(headerKey, headerValue);

        List<Subject> listSubjects = SubRep.findAll(Sort.by("id").ascending());

        SubjectExcelExporter excelExporter = new SubjectExcelExporter(listSubjects);

        excelExporter.export(response);
    }

    @GetMapping("/RegisedAllSubjectExport/{subject_id}")//นำออกได้เฉพาะที่ลงนักเรียนคนเดียว
    public String RegisedAllSubjectExport(@PathVariable("subject_id") int subject_id,HttpServletResponse response) throws IOException {
        response.setContentType("application/octet-stream");
        DateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd_HH:mm:ss");
        String currentDateTime = dateFormatter.format(new Date());

        String name_subject = Stu_SubRep.findName_subjectBySubject_id(subject_id);

        String headerKey = "Content-Disposition";
        String headerValue = "attachment; filename="+name_subject+"_" + currentDateTime + ".xlsx";
        response.setHeader(headerKey, headerValue);



        String msg = "";

        int countRissubjectbysubject_id =Stu_SubRep.countRissubjectbysubject_id(subject_id);

        if(countRissubjectbysubject_id>0||name_subject.isEmpty()){

            List<Stu_sub> listStu_sub  = Stu_SubRep.findToListBySubject_id(subject_id);
            Subject_StudentExcelExporter excelExporter = new Subject_StudentExcelExporter(listStu_sub,name_subject);
            excelExporter.export(response);
            msg = "paint";

        }else{
            msg= "NO regis";
        }
        System.out.println(countRissubjectbysubject_id);
        return msg;
    }

    @GetMapping(path="/allTeacher")
    public @ResponseBody
    Iterable<Teacher> getAllTeacher() {
        // This returns a JSON or XML with the users
        return TeaRep.findAll();
    }

    @GetMapping(path="/allTeacherData")
    public @ResponseBody
    Map<String,Iterable<Teacher>> getAllTeacherData() {
        // This returns a JSON or XML with the users
        HashMap<String,Iterable<Teacher>> map = new HashMap<>();
        map.put("data", TeaRep.findAll());
        return map;

    }

    @GetMapping(path="/getTeacher/{teacher_id}")
    public @ResponseBody
    Optional<Teacher> getTeacher(@PathVariable("teacher_id") int teacher_id) {
        // This returns a JSON or XML with the users
        return TeaRep.findById(teacher_id);
    }

    @GetMapping(path="/allStudent", produces= MediaType.APPLICATION_JSON_VALUE)
    public @ResponseBody
    Iterable<Student> getAllStudent()  {

        return StuRep.findAll();
    }

    @GetMapping(path="/getStudent/{student_id}")
    public @ResponseBody
    Optional<Student> getStudent(@PathVariable("student_id") int student_id) {
        // This returns a JSON or XML with the users
        return StuRep.findById(student_id);
    }


    @GetMapping(path="/allSubject")
    public @ResponseBody
    Iterable<Subject> getAllSubject() {
        // This returns a JSON or XML with the users
        return SubRep.findAll();
    }

    @GetMapping(path="/getSubject/{subject_id}")
    public @ResponseBody
    Optional<Subject> getSubject(@PathVariable("subject_id") int subject_id) {
        // This returns a JSON or XML with the users
        return SubRep.findById(subject_id);
    }

    @GetMapping(path="/allRegis")
    public @ResponseBody
    Iterable<Stu_sub> getAllRegis() {
        // This returns a JSON or XML with the users
        return Stu_SubRep.findAll();
    }

    @GetMapping(path="/getStudentRegisedSubject/{subject_id}")
    public @ResponseBody
    Iterable<Stu_sub> getRegis(@PathVariable("subject_id") int subject_id) {
        // This returns a JSON or XML with the users
        Subject subject = new Subject(subject_id);
        return Stu_SubRep.findBySubject_id(subject_id);
    }


}


